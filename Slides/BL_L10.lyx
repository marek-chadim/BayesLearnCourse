#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble

% you can play with different themes and color themes to find your favorite combination.
\mode<presentation> {
  \usetheme{Luebeck}
  \usecolortheme{beaver}
  \beamertemplatenavigationsymbolsempty
  \setbeamertemplate{headline}{}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% include necessary packages here
\usepackage{graphicx} % for including images
\usepackage{pgf} % for logo
\usepackage{colortbl}
\usepackage[usecourier=false]{jlcode} % For julia code
\usepackage{listings} % For R code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



\date{} % Date, can be changed to a custom date

\titlegraphic{

\includegraphics[width=1.5cm]{/home/mv/Dropbox/IconsAndLogos/LogoBlueJustRing.jpg}\hspace*{2.5cm}~%
\includegraphics[width=2cm]{/home/mv/Dropbox/IconsAndLogos/liulogo.png} \linebreak
\hrulefill \break
\tiny
\includegraphics[width=0.33cm]{/home/mv/Dropbox/IconsAndLogos/web.png} \href{https://mattiasvillani.com}{mattiasvillani.com}\hspace*{1cm}~
\includegraphics[width=0.3cm]{/home/mv/Dropbox/IconsAndLogos/twitter.jpg} \href{https://twitter.com/matvil}{@matvil}\hspace*{1cm}~
\includegraphics[width=0.3cm]{/home/mv/Dropbox/IconsAndLogos/github.png} \href{https://github.com/mattiasvillani}{mattiasvillani}~
}


\definecolor{blue}{RGB}{38, 122, 181}
\definecolor{orange}{RGB}{255, 128, 0}
\definecolor{lorange}{RGB}{255, 178, 102}
\definecolor{llorange}{RGB}{255, 229,204 }
\definecolor{red}{RGB}{255, 128, 0}
\definecolor{verylightgray}{RGB}{246, 246, 246}


\setbeamertemplate{itemize item}{\color{orange}$\blacksquare$}
\setbeamertemplate{itemize subitem}{\color{orange}$\blacktriangleright$}

\usepackage{tcolorbox}

\usepackage[ruled]{algorithm2e}
\usepackage{wasysym}
\SetKwInput{KwInput}{Input}
\SetKwInput{KwOutput}{Output}
\end_preamble
\options xcolor=svgnames
\use_default_options false
\begin_modules
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "palatino" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\size largest
\color orange
Bayesian Statistics I
\size default

\begin_inset Argument 1
status open

\begin_layout Plain Layout

\color gray
Probabilistic Programming
\end_layout

\end_inset


\end_layout

\begin_layout Subtitle

\color orange
Lecture 10 - Probabilistic programming for Bayesian inference
\end_layout

\begin_layout Author

\series bold
Mattias Villani
\series default
 
\begin_inset Graphics
	filename /home/mv/Dropbox/Teaching/BayesLearning/Misc/Beard Man Emoji.png
	lyxscale 10
	scale 2

\end_inset

 
\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout

\series bold
\color gray
Mattias Villani
\end_layout

\end_inset


\end_layout

\begin_layout Institute
Department of Statistics
\begin_inset Newline newline
\end_inset

Stockholm University 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Department of Computer and Information Science
\begin_inset Newline newline
\end_inset

Linköping University 
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Linköping and Stockholm University
\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\series bold
\color orange
Lecture overview
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
\color blue
Stan
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Itemize

\series bold
\color blue
Turing.jl
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\series bold
\color orange
Stan
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
\color blue
Stan
\color inherit
 
\series default
is a probabilistic programming language based on HMC.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Itemize
Allows for Bayesian inference in many models with automatic implementation
 of the MCMC sampler.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Itemize
Named after Stanislaw Ulam (1909-1984), co-inventor of the Monte Carlo algorithm.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Itemize
Written in C++ but can be run from R using the package 
\family typewriter
rstan
\end_layout

\begin_layout Standard
\begin_inset space \hspace{}
\length 2cm
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename Images/stan_logo.png
	scale 35

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \hspace{}
\length 1cm
\end_inset


\begin_inset Graphics
	filename Images/stan_ulam.jpeg
	scale 35

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stan logo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \hspace{}
\length 1cm
\end_inset

Stanislaw Ulam
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\series bold
\color orange
Stan - toy example: three plants
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Three plants were observed for four months, measuring the number of flowers
\end_layout

\begin_layout Standard
\begin_inset space \hspace{}
\length 2cm
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename Images/ThreePlants.eps
	scale 35

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{
\backslash
color{orange}
\backslash
textbf{Stan Model 1: iid Normal}}
\end_layout

\begin_layout Plain Layout

$$y_{i}
\backslash
stackrel{iid}{
\backslash
sim}N
\backslash
left(
\backslash
mu,
\backslash
sigma^{2}
\backslash
right)$$
\end_layout

\begin_layout Plain Layout

<<StanModel1, eval=FALSE, size='tiny'>>=
\end_layout

\begin_layout Plain Layout

library(rstan)
\end_layout

\begin_layout Plain Layout

y = c(4,5,6,4,0,2,5,3,8,6,10,8) 
\end_layout

\begin_layout Plain Layout

N = length(y)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

StanModel = '
\end_layout

\begin_layout Plain Layout

data { 
\end_layout

\begin_layout Plain Layout

  int<lower=0> N; // Number of observations 
\end_layout

\begin_layout Plain Layout

  int<lower=0> y[N]; // Number of flowers 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

parameters { 
\end_layout

\begin_layout Plain Layout

  real mu; 
\end_layout

\begin_layout Plain Layout

  real<lower=0> sigma2; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

model { 
\end_layout

\begin_layout Plain Layout

  mu ~ normal(0,100); // Normal with mean 0, st.dev.
 100 
\end_layout

\begin_layout Plain Layout

  sigma2 ~ scaled_inv_chi_square(1,2); // Scaled-inv-chi2 with nu 1, sigma
 2 
\end_layout

\begin_layout Plain Layout

  for(i in 1:N)   
\end_layout

\begin_layout Plain Layout

    y[i] ~ normal(mu,sqrt(sigma2)); 
\end_layout

\begin_layout Plain Layout

}'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{
\backslash
color{orange}
\backslash
textbf{Stan Model 2: multilevel normal}}
\end_layout

\begin_layout Plain Layout

$$y_{i,p}
\backslash
sim N
\backslash
left(
\backslash
mu_{p},
\backslash
sigma_{p}^{2}
\backslash
right),
\backslash
,
\backslash
,
\backslash
,
\backslash
,
\backslash
,
\backslash
mu_{p}
\backslash
sim N
\backslash
left(
\backslash
mu,
\backslash
sigma^{2}
\backslash
right)$$
\end_layout

\begin_layout Plain Layout

<<StanModel2, eval=FALSE, size='tiny'>>=
\end_layout

\begin_layout Plain Layout

StanModel = '
\end_layout

\begin_layout Plain Layout

data {   
\end_layout

\begin_layout Plain Layout

  int<lower=0> N; // Number of observations   
\end_layout

\begin_layout Plain Layout

  int<lower=0> y[N]; // Number of flowers   
\end_layout

\begin_layout Plain Layout

  int<lower=0> P; // Number of plants 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

transformed data {   
\end_layout

\begin_layout Plain Layout

  int<lower=0> M; // Number of months   
\end_layout

\begin_layout Plain Layout

  M = N / P; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

parameters { 
\end_layout

\begin_layout Plain Layout

  real mu; 
\end_layout

\begin_layout Plain Layout

  real<lower=0> sigma2; 
\end_layout

\begin_layout Plain Layout

  real mup[P]; 
\end_layout

\begin_layout Plain Layout

  real sigmap2[P]; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

model { 
\end_layout

\begin_layout Plain Layout

  mu ~ normal(0,100); // Normal with mean 0, st.dev.
 100 
\end_layout

\begin_layout Plain Layout

  sigma2 ~ scaled_inv_chi_square(1,2); // Scaled-inv-chi2 with nu 1, sigma
 2
\end_layout

\begin_layout Plain Layout

  for(p in 1:P){   
\end_layout

\begin_layout Plain Layout

    mup[p] ~ normal(mu,sqrt(sigma2));   
\end_layout

\begin_layout Plain Layout

    for(m in 1:M)     
\end_layout

\begin_layout Plain Layout

      y[M*(p-1)+m] ~ normal(mup[p],sqrt(sigmap2[p]));  
\end_layout

\begin_layout Plain Layout

  } 
\end_layout

\begin_layout Plain Layout

}'
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{
\backslash
color{orange}
\backslash
textbf{Stan Model 3: multilevel Poisson}}
\end_layout

\begin_layout Plain Layout

$$y_{i,p}
\backslash
sim Poisson
\backslash
left(
\backslash
mu_{p}
\backslash
right),
\backslash
,
\backslash
,
\backslash
,
\backslash
,
\backslash
,
\backslash
mu_{p}
\backslash
sim logN
\backslash
left(
\backslash
mu,
\backslash
sigma^{2}
\backslash
right)$$
\end_layout

\begin_layout Plain Layout

<<StanModel3, eval=FALSE, size='tiny'>>=
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

StanModel = '
\end_layout

\begin_layout Plain Layout

data {   
\end_layout

\begin_layout Plain Layout

  int<lower=0> N; // Number of observations   
\end_layout

\begin_layout Plain Layout

  int<lower=0> y[N]; // Number of flowers   
\end_layout

\begin_layout Plain Layout

  int<lower=0> P; // Number of plants 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

transformed data {   
\end_layout

\begin_layout Plain Layout

  int<lower=0> M; // Number of months   
\end_layout

\begin_layout Plain Layout

  M = N / P; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

parameters { 
\end_layout

\begin_layout Plain Layout

  real mu; 
\end_layout

\begin_layout Plain Layout

  real<lower=0> sigma2; 
\end_layout

\begin_layout Plain Layout

  real mup[P];
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

model { 
\end_layout

\begin_layout Plain Layout

  mu ~ normal(0,100); // Normal with mean 0, st.dev.
 100 
\end_layout

\begin_layout Plain Layout

  sigma2 ~ scaled_inv_chi_square(1,2); // Scaled-inv-chi2 with nu 1, sigma
 2
\end_layout

\begin_layout Plain Layout

  for(p in 1:P){     
\end_layout

\begin_layout Plain Layout

    mup[p] ~ lognormal(mu,sqrt(sigma2)); // Log-normal     
\end_layout

\begin_layout Plain Layout

    for(m in 1:M)       
\end_layout

\begin_layout Plain Layout

      y[M*(p-1)+m] ~ poisson(mup[p]); // Poisson   
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}'
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{
\backslash
color{orange}
\backslash
textbf{Stan: fit model and analyze output}}
\end_layout

\begin_layout Plain Layout

<<StanModel4, eval=FALSE, size='tiny'>>=
\end_layout

\begin_layout Plain Layout

data = list(N=N, y=y, P=P) 
\end_layout

\begin_layout Plain Layout

burnin = 1000 
\end_layout

\begin_layout Plain Layout

niter = 2000 
\end_layout

\begin_layout Plain Layout

fit = stan(model_code=StanModel,data=data,            
\end_layout

\begin_layout Plain Layout

           warmup=burnin,iter=niter,chains=4)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Print the fitted model
\end_layout

\begin_layout Plain Layout

print(fit,digits_summary=3)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Extract posterior samples 
\end_layout

\begin_layout Plain Layout

postDraws <- extract(fit) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Do traceplots of the first chain 
\end_layout

\begin_layout Plain Layout

par(mfrow = c(1,1)) 
\end_layout

\begin_layout Plain Layout

plot(postDraws$mu[1:(niter-burnin)],type="l",ylab="mu",main="Traceplot")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Do automatic traceplots of all chains 
\end_layout

\begin_layout Plain Layout

traceplot(fit)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Bivariate posterior plots 
\end_layout

\begin_layout Plain Layout

pairs(fit)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\series bold
\color orange
Stan - useful links
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\color blue
\begin_inset CommandInset href
LatexCommand href
name "Getting started with RStan"
target "https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started"
literal "false"

\end_inset


\color inherit

\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Itemize

\color blue
\begin_inset CommandInset href
LatexCommand href
name "RStan vignette"
target "https://cran.r-project.org/web/packages/rstan/vignettes/rstan.html"
literal "false"

\end_inset


\color inherit

\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Itemize

\color blue
\begin_inset CommandInset href
LatexCommand href
name "Stan Modeling Language User's Guide and Reference Manual"
target "http://mc-stan.org/users/documentation/"
literal "false"

\end_inset


\color inherit

\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Itemize

\color blue
\begin_inset CommandInset href
LatexCommand href
name "Stan Case Studies"
target "http://mc-stan.org/users/documentation/case-studies"
literal "false"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\series bold
\color orange
Turing.jl
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
\color blue
Turing
\color inherit
 
\series default
is a probabilistic programming language in Julia.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Itemize
Similar to Stan, but takes advantage of Julia's features such a metaprogramming.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Itemize
Named after Alan Turing (1912-1954).
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Itemize
Written in 
\family typewriter
Julia, which is fast natively.
\end_layout

\begin_layout Standard
\begin_inset space \hspace{}
\length 2cm
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename Images/turinglogo.png
	scale 20

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \hspace{}
\length 1cm
\end_inset


\begin_inset Graphics
	filename Images/Alan_Turing_Aged_16.jpg
	lyxscale 50
	scale 8

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Turing.jl logo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \hspace{}
\length 1cm
\end_inset

Alan Turing
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{
\backslash
color{orange}
\backslash
textbf{Turing.jl for Bernoulli model}}
\end_layout

\begin_layout Plain Layout


\backslash
small
\end_layout

\begin_layout Plain Layout


\backslash
begin{jllisting} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

using Turing, StatsPlots, Random
\end_layout

\begin_layout Plain Layout

# Declare the Turing model: 
\end_layout

\begin_layout Plain Layout

@model function iidbern(y, α, β)     
\end_layout

\begin_layout Plain Layout

	θ ~ Beta(α,β)  # prior     
\end_layout

\begin_layout Plain Layout

	N = length(y)  # number of observations     
\end_layout

\begin_layout Plain Layout

	for n in 1:N         
\end_layout

\begin_layout Plain Layout

		y[n] ~ Bernoulli(θ) # model     
\end_layout

\begin_layout Plain Layout

	end 
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Set up the observed data 
\end_layout

\begin_layout Plain Layout

data = [0,1,1,0,0,1,1,0,1,1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Settings for the Hamiltonian Monte Carlo (HMC) sampler.
 
\end_layout

\begin_layout Plain Layout

niter = 10000 
\end_layout

\begin_layout Plain Layout

nburn = 1000 
\end_layout

\begin_layout Plain Layout

ϵ = 0.1 
\end_layout

\begin_layout Plain Layout

τ = 10
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Sample the posterior using HMC 
\end_layout

\begin_layout Plain Layout

postdraws = sample(iidbern(data, 1, 2), HMC(ϵ, τ), niter,    
\end_layout

\begin_layout Plain Layout

	discard_initial = nburn) plot(postdraws)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Print and plot results display(postdraws) 
\end_layout

\begin_layout Plain Layout

plot(postdraws)   
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout


\backslash
end{jllisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\series bold
\color orange
Turing.jl for normal model
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename Images/turingNormal.png
	lyxscale 40
	scale 22

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\series bold
\color orange
Stan for normal model
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename Images/stanNormal.png
	lyxscale 40
	scale 20

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\end_body
\end_document
